#!/usr/bin/env fish

# Some utility functions

function split --description "split STRING DELIMETER - returns a list of the parts of STRING split by DELIMETER"
    echo $argv[1] | tr "$argv[2]" "\n"
end

function return_as_list --description "return_as_list LIST - echoes LIST each item on a new line"
    for i in $argv
        echo $i
    end
end

function get_arg_values --description "get_arg_values \"$argv\" KEY KEY... - returns a list of all values associated with any KEY"
    set keep 0
    for a in (split $argv[1] " ")
        if test $keep -eq 1
            set values $values $a
            set keep 0
        else
            switch $a
                case '-*'
                    for b in $argv[2..-1]
                        if test "$a" = "$b"
                            set keep 1
                            break
                        end
                    end
                case '*'
                    break
            end
        end
    end
    return_as_list $values
end

function get_arg_value --description "get_arg_value \"$argv\" KEY KEY... - returns the first value associated with any KEY"
    set values (get_arg_values $argv)
    if test -n "$values"
        echo $values[1]
    end
end

# First, find out what app we're interested in

# Check if there's a command line argument setting it
set app (get_arg_value "$argv" "--app" "-a")

# If not, try an environment variable
if test -z "$app"
    set app "$VG_APP_DIR"
end

# If not, try finding a .vantage file in CWD or above
if test -z "$app"
    set app "$PWD"
    while true
        if test -f "$app/.vantage"
            break
        else
            if test "$app" = "/"
                set --erase app
                break
            end
            set app (dirname "$app")
        end
    end
end

# Finally, default to $PWD
if test -z "$app"
    set app "$PWD"
end

set --export --global VG_APP_DIR "$app"
if test -f "$VG_APP_DIR/.vantage"
    for line in (cat "$VG_APP_DIR/.vantage")
        set kv (split $line "=")
        if test -z "$$kv[1]"
            set --export --global $kv[1] $kv[2..-1]
        end
    end
end

# Second, compile the required environment

if test -n "$VG_ENV_FILE"
    # A parent env file exists, so we can use the parent as our starting env
    set temp_env_file (mktemp)
    cat "$VG_ENV_FILE" > "$temp_env_file"
    set --export --global VG_PARENT_ENV_FILE "$VG_ENV_FILE"
    set --export --global VG_ENV_FILE "$temp_env_file"
else
    # We are the parent process so we have to build the starting env
    set --export --global VG_ENV_FILE (mktemp)
    if test -n "$VG_DEFAULT_ENV"
        cat "$VG_DEFAULT_ENV" > "$VG_ENV_FILE"
    end
end

# Add any env files listed in the command line
for e in (get_arg_values "$argv" "--env" "-e")
    cat "$e" >> "$VG_ENV_FILE"
end

# Add any variables set in the command line
for v in (get_arg_values "$argv" "--var" "-v")
    echo "$v" >> "$VG_ENV_FILE"
end

# Third, find the commands to run

while true
    switch "$argv[1]"
        case '-*'
            set argv $argv[3..-1]
        case '*'
            break
    end
end

set cmd $argv[1]
if test (count $argv) -gt 1
    set args $argv[2..-1]
end

if test -z "$VG_PLUGIN_PATH"
    if test -d "$VG_APP_DIR/vantage"
        set --export --global VG_PLUGIN_PATH "$VG_APP_DIR/vantage"
    end
end

set here (dirname (status --current-filename))
if not contains "$here/plugins/installed" $VG_PLUGIN_PATH
    set --export --global VG_PLUGIN_PATH $VG_PLUGIN_PATH "$here/plugins/installed"
end
if not contains "$here/plugins/core" $VG_PLUGIN_PATH
    set --export --global VG_PLUGIN_PATH $VG_PLUGIN_PATH "$here/plugins/core"
end

set pre_override 0
set peri_override 0
set post_override 0
for path in $VG_PLUGIN_PATH
    for plugin in (ls "$path")
        if test -f "$path/$plugin/aliases"
            set aliases (cat "$path/$plugin/aliases")
        end
        contains "$cmd" "$aliases"
        if test $status -eq 0 -o "$plugin" = "$cmd"
            set p "$path/$plugin"
            if test $pre_override -eq 0
                if test -f "$p/pre.override"
                    set pre "$p/pre.override"
                    set pre_override 1
                else if test -f "$p/pre"
                    set pre $pre "$p/pre"
                end
            end
            if test $peri_override -eq 0
                if test -f "$p/peri.override"
                    set peri "$p/peri.override"
                    set peri_override 1
                else if test -f "$p/peri"
                    set peri $peri "$p/peri"
                end
            end
            if test $post_override -eq 0
                if test -f "$p/post.override"
                    set post "$p/post.override"
                    set post_override 1
                else if test -f "$p/post"
                    set post $post "$p/post"
                end
            end
        end
    end
end

for c in $pre; eval "$c $args"; end
for c in $peri; eval "$c $args"; end
for c in $post; eval "$c $args"; end

rm -f "$VG_ENV_FILE"
set --erase VG_ENV_FILE
