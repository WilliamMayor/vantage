#!/usr/bin/env fish

set --export --global VG_INSTALL_DIR (dirname (status --current-filename))
source "$VG_INSTALL_DIR/functions"

# First, find out what app we're interested in

# Check if there's a command line argument setting it
set app (get_arg_value "$argv" "--app" "-a")

# If not, try an environment variable
if test -z "$app"
    set app "$VG_APP_DIR"
end

# If not, try finding a .vantage file in CWD or above
if test -z "$app"
    set app "$PWD"
    while true
        if test -f "$app/.vantage"
            break
        else
            if test "$app" = "/"
                set --erase app
                break
            end
            set app (dirname "$app")
        end
    end
end

# Finally, default to $PWD
if test -z "$app"
    set app "$PWD"
end

set --export --global VG_APP_DIR "$app"
if test -f "$VG_APP_DIR/.vantage"
    for line in (cat "$VG_APP_DIR/.vantage")
        set kv (split $line "=")
        if test -z "$$kv[1]"
            set --export --global $kv[1] $kv[2..-1]
        end
    end
end

# Second, compile the required environment

if test -n "$VG_ENV_FILE"
    # A parent env file exists, so we can use the parent as our starting env
    set temp_env_file (mktemp)
    cat "$VG_ENV_FILE" > "$temp_env_file"
    set --export --global VG_PARENT_ENV_FILE "$VG_ENV_FILE"
    set --export --global VG_ENV_FILE "$temp_env_file"
else
    # We are the parent process so we have to build the starting env
    set --export --global VG_ENV_FILE (mktemp)
    if test -n "$VG_DEFAULT_ENV"
        set --export --global VG_PARENT_ENV_FILE "$VG_DEFAULT_ENV"
        cat "$VG_DEFAULT_ENV" > "$VG_ENV_FILE"
    end
end

# Add any env files listed in the command line
for e in (get_arg_values "$argv" "--env" "-e")
    cat "$e" >> "$VG_ENV_FILE"
end

# Add any variables set in the command line
for v in (get_arg_values "$argv" "--var" "-v")
    echo "$v" >> "$VG_ENV_FILE"
end

# Third, set the plugin paths

# If it's not set at all, default to the dogfood plugins
if test -z "$VG_PLUGIN_PATH"
    set --export --global VG_PLUGIN_PATH "$VG_INSTALL_DIR/plugins/dogfood"
end

# If the default plugin paths are missing, add them back in
if not contains "$VG_INSTALL_DIR/plugins/installed" $VG_PLUGIN_PATH
    set --export --global VG_PLUGIN_PATH $VG_PLUGIN_PATH "$VG_INSTALL_DIR/plugins/installed"
end
if not contains "$VG_INSTALL_DIR/plugins/core" $VG_PLUGIN_PATH
    set --export --global VG_PLUGIN_PATH $VG_PLUGIN_PATH "$VG_INSTALL_DIR/plugins/core"
end

# Fourth, find the commands to run

# Remove the --env --var --app parts of the command
while true
    switch "$argv[1]"
        case '--var' '-v' '--env' '-e' '--app' '-a'
            set argv $argv[3..-1]
        case '*'
            break
    end
end

set cmd $argv[1]
if test -z "$cmd"
    set cmd "help"
end
if test (count $argv) -gt 1
    set args $argv[2..-1]
end

set found 0
for path in $VG_PLUGIN_PATH
    for plugin in (ls "$path")
        set names "$plugin"
        if test -f "$path/$plugin/aliases"
            set names $names (cat "$path/$plugin/aliases")
        end
        if contains "$cmd" $names
            set found 1
            set run $run "$path/$plugin/run"
        end
    end
end

if test $found -eq 0
    vantage help
else
    for c in $run
        eval "$c $args"
        set code $status
    end
end

rm -f "$VG_ENV_FILE"
set --erase VG_ENV_FILE

exit $code
